plugins {
    // Gradle plugin portal
    alias(libs.plugins.tripletPlay)
    alias(libs.plugins.android.application)
    alias(libs.plugins.amazonappstorepublisher)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.kotlin.serialization)
    alias(libs.plugins.anki.application.plugin)
    alias(libs.plugins.anki.idea.plugin)
    alias(libs.plugins.anki.application.lint.plugin)
}


def homePath = System.properties['user.home']




play {
    serviceAccountCredentials.set(file("${homePath}/src/AnkiDroid-GCP-Publish-Credentials.json"))
    track.set('alpha')
}

amazon {
    securityProfile = file("${homePath}/src/AnkiDroid-Amazon-Publish-Security-Profile.json")
    applicationId = "amzn1.devportal.mobileapp.524a424d314931494c55383833305539"
    pathToApks = [file("./build/outputs/apk/amazon/release/AnkiDroid-amazon-universal-release.apk")]
    replaceEdit = true
}

android{


    defaultConfig{
        testInstrumentationRunner 'com.ichi2.testutils.NewCollectionPathTestRunner'
    }
    buildTypes {
        named('debug') {
            versionNameSuffix "-debug"
            debuggable true
            applicationIdSuffix ".debug"
            splits.abi.universalApk = true // Build universal APK for debug always
            // Check Crash Reports page on developer wiki for info on ACRA testing
            // buildConfigField "String", "ACRA_URL", '"https://918f7f55-f238-436c-b34f-c8b5f1331fe5-bluemix.cloudant.com/acra-ankidroid/_design/acra-storage/_update/report"'
            if (project.rootProject.file('local.properties').exists()) {
                Properties localProperties = new Properties()
                localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
                // #6009 Allow optional disabling of JaCoCo for general build (assembleDebug).
                // jacocoDebug task was slow, hung, and wasn't required unless I wanted coverage
                testCoverageEnabled localProperties['enable_coverage'] != "false"
                // not profiled: optimization for build times
                if (localProperties['enable_languages'] == "false") {
                    android.defaultConfig.resConfigs "en"
                }
                // allows the scoped storage migration when the user is not logged in
                if (localProperties["allow_unsafe_migration"] != null) {
                    buildConfigField "Boolean", "ALLOW_UNSAFE_MIGRATION", localProperties["allow_unsafe_migration"]
                }
                // allow disabling leak canary
                if (localProperties["enable_leak_canary"] != null) {
                    buildConfigField "Boolean", "ENABLE_LEAK_CANARY", localProperties["enable_leak_canary"]
                } else {
                    buildConfigField "Boolean", "ENABLE_LEAK_CANARY", "true"
                }
            } else {
                testCoverageEnabled true
            }

            // make the icon red if in debug mode
            resValue 'color', 'anki_foreground_icon_color_0', "#FFFF0000"
            resValue 'color', 'anki_foreground_icon_color_1', "#FFFF0000"
            resValue "string", "applicationId", "${defaultConfig.applicationId}${applicationIdSuffix}"
        }



        named('release') {
            minifyEnabled true
            splits.abi.universalApk = true // Build universal APK for release with `-Duniversal-apk=true`
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            // syntax: assembleRelease -PcustomSuffix="suffix" -PcustomName="New name"
            if (project.hasProperty("customSuffix")) {
                // the suffix needs a '.' at the start
                applicationIdSuffix project.property("customSuffix").replaceFirst(/^\.*/, ".")
                resValue "string", "applicationId", "${defaultConfig.applicationId}${applicationIdSuffix}"
            } else {
                resValue "string", "applicationId", defaultConfig.applicationId
            }
            if (project.hasProperty("customName")) {
                resValue "string", "app_name", project.property("customName")
            }

            resValue 'color', 'anki_foreground_icon_color_0', "#FF29B6F6"
            resValue 'color', 'anki_foreground_icon_color_1', "#FF0288D1"
        }
    }
}

// Install Git pre-commit hook for Ktlint
tasks.register('installGitHook', Copy) {
    from new File(rootProject.rootDir, 'pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0755
}

tasks.register('assertNonzeroAndroidTests') {
    doLast {
        // androidTest currently creates one .xml file per emulator with aggregate results in this dir
        File folder = file("./build/outputs/androidTest-results/connected/flavors/play")
        File[] listOfFiles = folder.listFiles({ d, f -> f ==~ /.*.xml/ } as FilenameFilter)
        for (File file : listOfFiles) {
            // The aggregate results file currently contains a line with this pattern holding test count
            String[] matches = file.readLines().findAll { it.contains('<testsuite') }
            if (matches.length != 1) {
                throw new GradleScriptException("Unable to determine count of tests executed for " + file.name + ". Regex pattern out of date?", null)
            }
            if (!(matches[0] ==~ /.* tests="\d+" .*/) || matches[0].contains('tests="0"')) {
                throw new GradleScriptException("androidTest executed 0 tests for " + file.name + " - Probably a bug with the emulator. Try another image.", null)
            }
        }
    }
}
afterEvaluate {
    tasks.named('connectedPlayDebugAndroidTest').configure { finalizedBy('assertNonzeroAndroidTests') }
}

apply from: "./robolectricDownloader.gradle"
apply from: "./jacoco.gradle"
